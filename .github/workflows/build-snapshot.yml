name: Build Development Snapshot

on:
  push:
    branches: [ development ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Read project version from Gradle
        id: version
        shell: bash
        run: |
          set -euo pipefail
          PV=$(./gradlew -q properties | awk -F': ' '/^version:/ {print $2; exit}')
          if [[ -z "${PV}" ]]; then
            echo "Failed to read Gradle version"; exit 1
          fi
          echo "PROJECT_VERSION=${PV}" >> "$GITHUB_ENV"
          echo "version=${PV}" >> "$GITHUB_OUTPUT"

      - name: Compute BUILD_NUMBER from GitHub Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          
          V="$(./gradlew -q properties | awk -F': ' '/^version:/ {print $2; exit}')"
          echo "PROJECT_VERSION=$V" >> "$GITHUB_ENV"
          
          # List tag and name fields line-by-line, drop quotes
          LINES="$(gh release list --limit 200 --json tagName,name --jq '.[] | .tagName, .name' | tr -d '"')"
          
          # Exact matches like "<version>-bNN"
          CANDS="$(printf '%s\n' "$LINES" | grep -F "^$V-b" | grep -E "^$V-b[0-9]+$" || true)"
          
          # Extract NN and compute max
          NUMS="$(printf '%s\n' "$CANDS" | sed -E "s/^$V-b([0-9]+)$/\1/" || true)"
          MAX_B="$(printf '%s\n' "${NUMS:-}" | grep -E '^[0-9]+$' | sort -n | tail -1 || true)"
          [[ -z "${MAX_B:-}" ]] && MAX_B=0
          
          BUILD_NUMBER=$((MAX_B + 1))
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_ENV"
          echo "Derived $V-b$BUILD_NUMBER"

      - name: Build MyPet module
        run: |
          ./gradlew --no-daemon build -PbuildType=dev -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}

      - name: Find and rename MyPet jar with build number
        id: findjar
        shell: bash
        run: |
          set -euo pipefail
          
          JAR=$(ls build/libs/*.jar 2>/dev/null | grep -vE '(-sources|-javadoc|-plain)\.jar$' | head -n1 || true)
          [[ -z "$JAR" || ! -f "$JAR" ]] && { echo "Jar not found"; ls -la build/libs || true; exit 1; }
          
          DIR=$(dirname "$JAR")
          BASE=$(basename "$JAR" .jar)
          NEW_NAME="${BASE}-SNAPSHOT-b${BUILD_NUMBER}.jar"
          NEW_PATH="${DIR}/${NEW_NAME}"
          
          mv "$JAR" "$NEW_PATH"
          
          echo "jar=$NEW_PATH" >> "$GITHUB_OUTPUT"
          echo "filename=$NEW_NAME" >> "$GITHUB_OUTPUT"
          echo "Renamed to: $NEW_NAME"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.PROJECT_VERSION }}-SNAPSHOT-b${{ env.BUILD_NUMBER }}
          name: v${{ env.PROJECT_VERSION }}-SNAPSHOT-b${{ env.BUILD_NUMBER }}
          generate_release_notes: true
          prerelease: true
          files: ${{ steps.findjar.outputs.jar }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}