name: Release Dev-Build (Gradle)

on:
  push:
    branches: [ development ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create CI init script to read Gradle props
        run: |
          cat > ci-props.init.gradle.kts <<'EOF'
          allprojects {
            tasks.register("ciPrintProp") {
              doLast {
                val key = providers.systemProperty("prop").orNull
                  ?: throw GradleException("Missing -Dprop")
                val value = if (extra.has(key)) {
                  extra[key]
                } else {
                  findProperty(key)
                } ?: ""
                println(value.toString())
              }
            }
          }
          EOF

      # 1) Read current version from :modules:MyPet
      - name: Read current version
        id: getver
        run: |
          CURR=$(./gradlew -I ci-props.init.gradle.kts -q :modules:MyPet:ciPrintProp -Dprop=version)
          echo "current=$CURR" >> "$GITHUB_OUTPUT"

      - name: Compute next PATCH version
        id: bump
        run: |
          v='${{ steps.getver.outputs.current }}'
          IFS='.' read -r MA MI PA <<< "$v"
          [[ -z "$MA" || -z "$MI" || -z "$PA" ]] && { echo "Could not parse version: $v"; exit 1; }
          NEXT="${MA}.${MI}.$((PA+1))"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo "Bumping $v -> $NEXT"

      # 2) Write new version to Gradle config (prefers gradle.properties, falls back to build.gradle.kts)
      - name: Set version in MyPet module
        run: |
          set -e
          NEXT='${{ steps.bump.outputs.next }}'
          if [[ -f modules/MyPet/gradle.properties ]]; then
            if grep -q '^version=' modules/MyPet/gradle.properties; then
              sed -i "s/^version=.*/version=${NEXT}/" modules/MyPet/gradle.properties
            else
              echo "version=${NEXT}" >> modules/MyPet/gradle.properties
            fi
          else
            sed -i "s/^version\s*=\s*\"[^\"]*\"/version = \"${NEXT}\"/" modules/MyPet/build.gradle.kts
          fi

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add modules/MyPet/gradle.properties modules/MyPet/build.gradle.kts || true
          git commit -m "Bump MyPet dev-release to ${{ steps.bump.outputs.next }}"
          git push

      - name: Tag and push
        run: |
          git tag -a '${{ steps.bump.outputs.next }}' -m 'Release ${{ steps.bump.outputs.next }}'
          git push origin '${{ steps.bump.outputs.next }}'

      # 3) Gradle build (MyPet only)
      - name: Build MyPet module
        run: |
          ./gradlew --no-daemon :modules:MyPet:clean :modules:MyPet:build

      - name: Find MyPet jar
        id: findjar
        shell: bash
        run: |
          # pick primary plugin jar, exclude sources/javadoc/classifier jars
          JAR=$(ls modules/MyPet/build/libs/*.jar 2>/dev/null | grep -vE '(-sources|-javadoc|-plain)\.jar$' | head -n1 || true)
          [[ -z "$JAR" || ! -f "$JAR" ]] && { echo "Jar not found"; ls -la modules/MyPet/build/libs || true; exit 1; }
          echo "jar=$JAR" >> "$GITHUB_OUTPUT"
          echo "Found: $JAR"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.next }}
          name: v${{ steps.bump.outputs.next }}
          generate_release_notes: true
          files: ${{ steps.findjar.outputs.jar }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}