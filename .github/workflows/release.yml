name: Release Dev-Build

on:
  push:
    branches: [ development ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 1) Read current version from modules/MyPet/pom.xml and bump PATCH
      - name: Read current version
        id: getver
        run: |
          CURR=$(mvn -f modules/MyPet/pom.xml -q -DforceStdout help:evaluate -Dexpression=project.version)
          echo "current=$CURR" >> $GITHUB_OUTPUT

      - name: Compute next PATCH version
        id: bump
        run: |
          v='${{ steps.getver.outputs.current }}'
          IFS='.' read -r MA MI PA <<< "$v"
          [[ -z "$MA" || -z "$MI" || -z "$PA" ]] && { echo "Could not parse version: $v"; exit 1; }
          NEXT="${MA}.${MI}.$((PA+1))"
          echo "next=$NEXT" >> $GITHUB_OUTPUT
          echo "Bumping $v -> $NEXT"

      - name: Set version in MyPet module POM
        run: |
          mvn -f modules/MyPet/pom.xml versions:set -DnewVersion='${{ steps.bump.outputs.next }}' -DgenerateBackupPoms=false

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add modules/MyPet/pom.xml
          git commit -m "Bump MyPet dev-release to ${{ steps.bump.outputs.next }}"
          git push

      - name: Tag and push
        run: |
          git tag -a '${{ steps.bump.outputs.next }}' -m 'Release ${{ steps.bump.outputs.next }}'
          git push origin '${{ steps.bump.outputs.next }}'

      - name: Maven build (MyPet only)
        run: mvn -B -pl modules/MyPet -am clean package -DskipTests=false

      - name: Find MyPet release jar
        id: findjar
        run: |
          VERSION='${{ steps.bump.outputs.next }}'
          # Find exactly MyPet-<version>.jar (case-sensitive)
          FILE=$(find target -type f -name "MyPet-${VERSION}.jar" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "❌ No matching MyPet-${VERSION}.jar found!"
            ls -la target
            exit 1
          fi
          echo "Found: $FILE"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.next }}
          name: v${{ steps.bump.outputs.next }}
          generate_release_notes: true
          files: ${{ steps.findjar.outputs.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
